#!/usr/bin/python
# File:  option_generation
# Author:  mikolas
# Created on:  Mon, Feb 27, 2012 3:06:02 PM
# Copyright (C) 2012, Mikolas Janota

import sys

class Option:
  def __init__ (self, identifier, short_option, has_arguments, description):
    self.identifier = identifier
    self.short_option = short_option
    self.has_arguments = has_arguments
    self.description = description
    self.default = 0

class Options:
  def __init__ (self, name):
    self.name = name
    self.options = [] 

  def add_short_option(self, identifier, short_option, has_arguments, description):
    self.options.append( Option(identifier,short_option, has_arguments, description) )

  def add_short_non_arg_option(self, identifier, short_option, description):
    self.add_short_option(identifier,short_option, False, description)

def generate(options, output_hh, output_cc):
  preprocessor_id = options.name+'_HH'
  print >>output_hh, '#ifndef', preprocessor_id 
  print >>output_hh, '#define', preprocessor_id 
  print >>output_hh, '#include <string>'
  print >>output_hh, '#include <vector>'
  print >>output_hh, '#include <ostream>'
  print >>output_hh, 'using std::string;'
  print >>output_hh, 'class', options.name, '{'
  print >>output_hh, 'public:'
  print >>output_hh, 'bool parse(int argc,char **argv);'
  print >>output_hh, ' ', options.name, '()'
  for i in range(len(options.options)):
    print >>output_hh, ' ', (':' if i==0 else ','),
    o=options.options[i]
    print >>output_hh, o.identifier, '(', o.default , ')'
  print >>output_hh, '  {}'

  print >>output_hh, '  const std::vector<string>&  get_rest() const { return rest; }'
  print >>output_hh, '  std::ostream&               print(std::ostream& out) const;'
  for o in options.options:
    print >>output_hh, '  int                         get_'+o.identifier+'() const', '{ return', o.identifier, ';}'
    if o.has_arguments: print >>output_hh, '  string                      get_'+o.identifier+'_arg() const { return', o.identifier+'_arg', ';}' 
    
  print >>output_hh, 'private:'
  print >>output_hh, '  std::vector<string> rest;'
  for o in options.options:
    print >>output_hh, '  int',  o.identifier, ';'
    if o.has_arguments: print >>output_hh, '  string',  o.identifier+'_arg', ';'
  print >>output_hh, '};'
  print >>output_hh, '#endif'

  # ---------------------------------------------------

  option_format_string = ''
  for o in options.options:
    option_format_string = option_format_string + o.short_option[1]
    if o.has_arguments: option_format_string=option_format_string+':'
  print >>output_cc, '#include <iostream>'
  print >>output_cc, '#include <stdlib.h>'
  print >>output_cc, '#include <getopt.h>'
  print >>output_cc, '#include <stdio.h>'
  print >>output_cc, 'using std::ostream;'
  print >>output_cc, 'using std::endl;'
  print >>output_cc, '#include', '"'+options.name+'.h"'
  print >>output_cc, 'bool',  options.name+'::parse(int argc,char **argv) {'
  print >>output_cc, ' static struct option long_options[] = {{0, 0, 0, 0}};'
  print >>output_cc, ' int c;'
  print >>output_cc, ' bool return_value = true;'
  print >>output_cc, ' while (1) {'
  print >>output_cc, '   int option_index = 0;'
  print >>output_cc, '   c = getopt_long(argc, argv, "'+option_format_string+'", long_options, &option_index);'
  print >>output_cc, '   if (c == -1) break;'
  print >>output_cc, '   switch (c) {'
  for o in options.options:
    print >>output_cc, '   case \''+o.short_option[1]+'\':'
    print >>output_cc, '     ++'+o.identifier+';'
    if o.has_arguments: print >>output_cc, '     '+o.identifier+'_arg = optarg;'
    print >>output_cc, '     break;'

  print >>output_cc, '   case \'?\':'
  print >>output_cc, '    // if (isprint(optopt)) fprintf (stderr, "Unknown option -%c.\\n", optopt);'
  print >>output_cc, '    return_value = false;'
  print >>output_cc, '    break;'
  print >>output_cc, '   }'
  print >>output_cc, ' }'
  print >>output_cc, ' for (int i=optind; i<argc; ++i) rest.push_back(argv[i]);'
  print >>output_cc, ' return return_value;'
  print >>output_cc, '}'

#
  print >>output_cc, 'ostream&',  options.name+'::print(ostream& out) const {'
  for o in options.options:
    print >>output_cc, ' out<< "',o.short_option,'";'
    if (o.has_arguments): print >>output_cc, ' out<< " ARG";'
    print >>output_cc, ' out<< "    "<<"',o.description,'";'
    print >>output_cc, ' out<< endl;'
  print >>output_cc, ' return out;'
  print >>output_cc, '}'

def main():
  options = Options("Options")
  options.add_short_non_arg_option('aig','-a','use only AND gates')
  options.add_short_non_arg_option('simplify','-s','use simplification')
  options.add_short_non_arg_option('flatten','-f','flatten')
  options.add_short_non_arg_option('unit','-u','unit')
  options.add_short_non_arg_option('polarities','-p','Set variable polarities.')
  options.add_short_non_arg_option('full','-e','initialize all abstractions with the input formula right at the beginning')
  options.add_short_non_arg_option('luby_rest','-l','use luby restarts')
  options.add_short_non_arg_option('verbose','-v','verbosity level')
  options.add_short_non_arg_option('help','-h','print help')
###
  generate(options, sys.stdout, sys.stderr)

# main
main()
